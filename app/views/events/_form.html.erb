<div class="col-md-3">
<div class="authform">
<%= simple_form_for (@event), html: { multipart: true, role: "form" } do |f| %>
  <%= f.error_notification %>
  <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

  <div class="form-inputs">
    <%#= f.input :address, :autofocus => true, placeholder: t('geolocate') %>
    <%= f.text_field :address, class: 'form-control', :autofocus => true, placeholder: t('geolocate') %>
    <div class="btn btn-primary demo" onclick="getLocation()"><i class="fa fa-map-marker" aria-hidden="true"></i></div>

    <% if user_signed_in? %>
      <% if current_user.try(:admin?) %>
      <%= f.input :city %>
      <%= f.input :country %>
      <%= f.input :latitude, :readonly => true %>
      <%= f.input :longitude, :readonly => true %>
      <% end %>
    <% end %>
    <%= f.input :photo, :style=> 'margin-top:15px !important;' %>
    <%= f.hidden_field :photo_cache %>
              <% if event.photo? %>
                  <%= image_tag event.photo.thumb.url %>
                  <div>
                    <%= label_tag :remove_image do %>
                      Remove image
                      <%= f.check_box :remove_photo %>
                    <% end %>
                  </div>
              <% end %>


            <% if @event.new_record? && !current_user.try(:admin?) %>
            <%= hidden_field_tag :shortcut, params[:shortcut] %>

            <% end %>




    <% if current_user.try(:admin?) %>
    <%= f.association :passenger, include_blank: false, include_hidden: false %>
    <%= f.association :user, include_blank: false, include_hidden: false %>
    <%= f.input :published %>
    <% end %>
  </div>

  <div class="form-actions">
    <%= f.button :submit %>
  </div>
<% end %>

</div>
</div>
<div class="col-md-9" style="margin-top:30px;">
<div id="map" style="height: 500px"></div>
</div>
<script>
(function() {
  var $, cupcakeTiles;
  $ = jQuery;
  cupcakeTiles = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_nolabels/{z}/{x}/{y}.png', {
    minZoom: 2,
    maxZoom: 18,
  });
  var counter = 0;
  //var Passenger = document.getElementById("event_passenger_id").value;
  //$.getJSON('<%= root_url %>/passengers/<%= params[:passenger] %>.json', function(data) {
  $.getJSON("<%= root_url %>/passengers/<%= @event.passenger_id %>.json", function(data) {

    var geojson, map;
    var pointlist = [];

geojson = L.geoJson(data, {
    onEachFeature: function(feature, layer) {
          counter++;

          var x = feature.geometry.coordinates[1];
          var y = feature.geometry.coordinates[0];
          pointlist.push([x, y]);

        layer.bindPopup(feature.properties.popupContent);
        layer.on('mouseover', function (e) {
              this.openPopup();
          });
          layer.on('mouseout', function (e) {
              this.closePopup();
          });

        if (layer.feature.properties.markerurl == null){
        layer.setIcon(new L.DivIcon({
        iconSize: new L.Point(82, 32),
        className: "divicon",
        html:'<p class="text-center small text-muted"><i class="fa fa-circle fa-3x" aria-hidden="true"></i><code>Etape '+counter+'</code></p>'
        }));


       } else {
          layer.setIcon(new L.DivIcon({
          iconSize: new L.Point(82, 32),
          className: "divicon",
          html:'<img src="'+layer.feature.properties.markerurl+'" class="img-marker"><p class="text-center"><code>Etape '+counter+'</code></p>'
          }));
            }
  }
});

    map = L.map('map').fitBounds(geojson.getBounds());
    map.zoomControl.setPosition('bottomright');

    var pathLine = L.polyline(pointlist, { dashArray: '1,5', color: '#000', weight: 1.3, opacity: 1, lineCap: 'square'}).addTo(map)

    cupcakeTiles.addTo(map);
    var markers = L.markerClusterGroup();
    markers.addLayer(geojson);
    markers.addTo(map);

  });

}).call(this);
</script>
<script>
var x = document.getElementById("demo");
var geocoder = new google.maps.Geocoder();

function getAddress(location, callback){
    geocoder.geocode({'latLng': location}, function(results, status){
        if(status === google.maps.GeocoderStatus.OK){
            if(results[0]){
                var address1 = results[0].formatted_address;
                callback(address1);
            }
        }
    });
}

function getLocation() {
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(showPosition);
} else {
  x.innerHTML = "Geolocation is not supported by this browser.";
}
}

function showPosition(position) {
// x.innerHTML = "Latitude: " + position.coords.latitude +
// "<br>Longitude: " + position.coords.longitude;

//document.getElementById('user_event_address').value=position.coords.latitude +
//" " + position.coords.longitude;

var location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
getAddress(location, function(address)
{
    console.log(address);
    document.getElementById('event_address').value=address;
});
}



</script>
