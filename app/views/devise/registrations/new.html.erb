<div class="col-md-4">
<div class="authform">
  <%= form_for(resource, :as => resource_name, :url => registration_path(resource_name), :html => { :role => 'form'}) do |f| %>
    <h3><%= t('sign_up') %></h3>
    <%= devise_error_messages! %>

    <%= f.simple_fields_for :events do |f| %>
      <div class="input-group">
        <%= f.text_field :address, class: 'form-control', :autofocus => true, placeholder: true, required: true %>
        <span class="input-group-btn">
          <a href="#" class="btn btn-default geolocate" onclick="getLocation()" type="submit">
              <i class="fa fa-map-marker"></i>
          </a>
        </span>
      </div>
      <div id="error-address"></div>

      <div class="form-group">
              <label></label>
              <div class="input-group">
                <input type="text" class="form-control" id="input-url-image" readonly placeholder="<%= t('no_file_chosen') %>">
                  <span class="input-group-btn">
                      <span class="btn btn-default btn-file">
                          <i class="fa fa-camera"></i>
                          <%= f.input :photo, :as => :file, label: false %>
                      </span>
                  </span>
              </div>
              <div id="error-photo" class="text-danger"></div>
              <small class="form-text text-muted hint-photo">Ajoutez votre photo du Passager (facultatif)</small>
              <img id='img-upload'/>
          </div>
      <%= f.hidden_field :passenger_id, value: @passenger %>
      <%= hidden_field_tag :t, params[:t] %>
    <% end %>

    <div class="form-group">
      <%= f.text_field :name, class: 'form-control', required: true, :minlength=>"3", placeholder: true  %>
    </div>
    <div class="form-group">
      <%= f.email_field :email, class: 'form-control', required: true, placeholder: true %>
    </div>
    <div class="form-group">
      <%= f.password_field :password, class: 'form-control', required: true, placeholder: true %>
    </div>
    <div class="form-group">
      <%= f.password_field :password_confirmation, class: 'form-control', required: true, placeholder: true %>
    </div>

      <%= f.hidden_field :locale, value: I18n.locale %>
      <%= invisible_captcha sentence_for_humans: "who is it?" %>
      <%= f.submit t('sign_up'),:id => 'submit-user', :class => 'button left btn btn-primary' %>
      <p><%= t('already_in') %> <%= link_to t('click_here'), new_event_path(shortcut: params[:t]) %>.

  <% end %>
</div>
</div>
<div class="col-md-8" style="margin-top:30px;">
<div id="map" style="height: 600px;"></div>
</div>

<script>
(function() {
  var $, cupcakeTiles;
  $ = jQuery;
    cupcakeTiles = L.tileLayer('https://api.mapbox.com/styles/v1/julesvau/cjl26w2ce4t8u2sohaa3uec8d/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoianVsZXN2YXUiLCJhIjoiY2prNDd6NW5yMGFtOTNrbzQ5bWEweDgzbSJ9.-RD762orQSENzQ_f7TKU9g', {
    minZoom: 2,
    maxZoom: 18,
  });

  var Passenger = document.getElementById("user_events_attributes_0_passenger_id").value;
  $.getJSON("<%= root_url %>/passengers/" + Passenger + ".json", function(data) {

    var geojson, map;
    var pointlist = [];
    var counter = 0;

geojson = L.geoJson(data, {
    onEachFeature: function(feature, layer) {
          counter++;

          var x = feature.geometry.coordinates[1];
          var y = feature.geometry.coordinates[0];
          pointlist.push([x, y]);

          layer.bindPopup(feature.properties.popupContent, {
          offset: new L.Point(10, -20),
          keepInView: true,
          showOnMouseOver: true,
          maxWidth: 400
          });
        layer.on('mouseover', function (e) {
              this.openPopup();
          });
          layer.on('mouseout', function (e) {
              this.closePopup();
          });

        if (layer.feature.properties.markerurl == null){
          layer.setIcon(new L.DivIcon({
          iconSize: new L.Point(64, 64),
          iconAnchor:[24, 24],
          className: "",
          html:'<p class="text-center"> <img src="'+layer.feature.properties.markerurl_fallback+'" class="img-marker img-circle '+layer.feature.properties.divclass+'">'+layer.feature.properties.title+'</p>'
        }));


       } else {
         layer.setIcon(new L.DivIcon({
         iconSize: new L.Point(64, 64),
         iconAnchor:[24, 24],
         className: "",
         html:'<p class="text-center"> <img src="'+layer.feature.properties.markerurl+'" class="img-marker img-circle '+layer.feature.properties.divclass+'">'+layer.feature.properties.title+'</p>'
          }));
        }
  }

});

function isEmpty(obj) {
    for(var key in obj) {
        if(obj.hasOwnProperty(key))
            return false;
    }
    return true;
}

if(isEmpty(geojson._layers)) {
  map = L.map('map').setView([30, 0], 2);
} else {
  map = L.map('map').fitBounds(geojson.getBounds());
}

    map.zoomControl.setPosition('bottomright');
    cupcakeTiles.addTo(map);
    var markers = L.markerClusterGroup();
    var pathLine = L.polyline(pointlist, { dashArray: '1,5', color: '#000', weight: 1.3, opacity: 1, lineCap: 'square'}).addTo(map)
    markers.addLayer(geojson);
    markers.addTo(map);

    // var firefoxIcon = L.icon({
    //        iconUrl: 'http://joshuafrazier.info/images/firefox.svg',
    //        iconSize: [38, 95], // size of the icon
    //        });

    var firefoxIcon = L.divIcon({
      html: '<i class="fa fa-map-marker text-danger fa-3x"></i>',
    iconSize: [20, 20],
    iconAnchor: [10, 40],
    className: 'myDivIcon'
       });
       // create marker object, pass custom icon as option, add to map
       // var marker = L.marker([43.64701, -79.39425], {icon: firefoxIcon}).addTo(map);
       var theMarker = {};
       map.on('click',function(e){
           lati = e.latlng.lat;
           longi = e.latlng.lng;
           var geocoder = new google.maps.Geocoder;
           function geocodeLatLng(geocoder, lati, longi) {
                 var latlng = {lat: lati, lng: longi};
                 geocoder.geocode({'location': latlng}, function(results, status) {
                   if (status === 'OK') {
                     if (results[0]) {
                       document.getElementById('user_events_attributes_0_address').value=results[0].formatted_address;

                     } else {
                       //
                       $.notify({
                       message: "<%= t('geolocate_failure') %>"
                       },{
                       type: "danger",
                       offset: {
                         x: 25,
                         y: 80
                       },
                       placement: {
                       align: "right",
                       },
                       animate: {
                         enter: 'animated bounceIn',
                         exit: 'animated bounceOut'
                       }
                       });
                       //

                     }
                   } else {
                     //
                     $.notify({
                     message: "<%= t('geolocate_failure') %>"
                     },{
                     type: "danger",
                     offset: {
                       x: 25,
                       y: 80
                     },
                     placement: {
                     align: "right",
                     },
                     animate: {
                       enter: 'animated bounceIn',
                       exit: 'animated bounceOut'
                     }
                     });
                     //
                   }
                 });
               }
               geocodeLatLng(geocoder, lati, longi);
               //Clear existing marker,

               if (theMarker != undefined) {
                     map.removeLayer(theMarker);
               };

           //Add a marker to show where you clicked.
            theMarker = L.marker([lati,longi], {icon: firefoxIcon}).addTo(map);

       });

       window.PlaceFirefox = function(lati, longi){
        //function PlaceFirefox(lati, longi){
               //Clear existing marker,

               if (theMarker != undefined) {
                     map.removeLayer(theMarker);
               };

           //Add a marker to show where you clicked.
            theMarker = L.marker([lati,longi], {icon: firefoxIcon}).addTo(map);
            //map.flyTo(new L.LatLng(lati, longi));
            map.flyTo([lati, longi], map.getZoom())
       };

  });

}).call(this);

// animation loading coordonn√©es qd clic
$(function(){
		$('.geolocate').on("click", function () {
		$('.fa-map-marker').addClass("animate-flicker");
		setTimeout(RemoveClass, 3500);
		});
		function RemoveClass() {
		$('.fa-map-marker').removeClass("animate-flicker");
		}
		});

var x = document.getElementById("geolocate");
var geocoder = new google.maps.Geocoder();

function getAddress(location, callback){
    geocoder.geocode({'latLng': location}, function(results, status){
        if(status === google.maps.GeocoderStatus.OK){
            if(results[0]){
                var address1 = results[0].formatted_address;
                console.log(results[0]);

                callback(address1);
            }
        }
    });
}

function getLocation() {
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(showPosition);

} else {
  x.innerHTML = "Geolocation is not supported by this browser.";
}
}

function showPosition(position) {

var location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
getAddress(location, function(address)
{
    document.getElementById('user_events_attributes_0_address').value=address;
 var personne = {};
 	function placeMarker(){
		var lat = position.coords.latitude;
		var lng = position.coords.longitude;
      var person = L.marker([lat,lng])
	};
PlaceFirefox(position.coords.latitude, position.coords.longitude)
placeMarker(position.coords.latitude)
});
}
</script>

<script>
jQuery.validator.setDefaults({
  success: "valid",
  errorElement: "span",
  errorClass: "help-block",
highlight: function (element, errorClass, validClass) {
if (!$(element).hasClass('novalidation')) {
    $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
}
},
unhighlight: function (element, errorClass, validClass) {
if (!$(element).hasClass('novalidation')) {
    $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
}
},
errorPlacement: function (error, element) {
if (element.parent('.input-group').length) {
    error.insertAfter(element.parent());
}
else if (element.prop('type') === 'radio' && element.parent('.radio-inline').length) {
    error.insertAfter(element.parent().parent());
}
else if (element.prop('type') === 'checkbox' || element.prop('type') === 'radio') {
    error.appendTo(element.parent().parent());
}
else { error.insertAfter(element); }
}
});

$.validator.addMethod('filesize', function (value, element, param) {
    return this.optional(element) || (element.files[0].size <= param)
  }, '<%= t('file_size') %>');

$( "#new_user" ).validate({
lang: '<%= I18n.locale %>',
rules: {
      "user_events_attributes_0_address": "required",
      "user_name": "required",
      "user_email": {
        required: true,
        email: true
       },
       "user[events_attributes][0][photo]": {
                required: false,
                extension: "jpg|jpeg|png",
                filesize:11000000
            },
      "user[password]": {
        minlength: 6
               },
       "user[password_confirmation]": {
         minlength: 6,
         equalTo : "#user_password"
       }
},
errorPlacement: function(error, element) {
     if (element.attr("name") == "user[events_attributes][0][photo]") {
         $("#error-photo").html( error );
     } else if (element.attr("name") == "user[events_attributes][0][address]") {
         $("#error-address").html( error );
     } else {
         error.insertAfter(element);
     }
   }
});

</script>
<script>
$(document).on('change', '.btn-file :file', function() {
		var input = $(this),
			label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
		input.trigger('fileselect', [label]);
		});

		$('.btn-file :file').on('fileselect', function(event, label) {

		    var input = $(this).parents('.input-group').find(':text'),
		        log = label;

		    if( input.length ) {
		        input.val(log);
		    } else {
		        if( log ) alert(log);
		    }

		});
		function readURL(input) {
		    if (input.files && input.files[0]) {
		        var reader = new FileReader();

		        reader.onload = function (e) {
		            $('#img-upload').attr('src', e.target.result);
                $('#img-upload').css('padding','15px');
                $('.hint-photo').addClass('hidden');

		        }

		        reader.readAsDataURL(input.files[0]);
		    }
		}

		$("#user_events_attributes_0_photo").change(function(){
		    readURL(this);
		});

    $('#input-url-image').on('click', function() {
        $('#user_events_attributes_0_photo').click();
    });
</script>
