<% meta title: t('passenger') + " " + @passenger.name %>
<% meta og: { image: @event.passenger.photo_url(:facebook) } %>
<% meta og: { image:  { width: "1200", height: "630" } } %>

<div class="col-sm-5 ui-topleft">
  <%= link_to("#", onclick: 'showImage();') do %>
  <%= image_tag(@passenger.photo_url(:large), alt: 'Image'.to_s, id: 'passenger_image', style: 'display:none;') if @passenger.photo? %>
  <% end %>

<span class="wiggle default-shadow" id="passenger_title"><%= t('passenger') %> <%= t('hash') %><%= @passenger.name %> </span>
<% unless @passenger.events.last.nil? || current_user == @passenger.events.last.user %>
  <%= submit_tag t('host'), :type => 'button', class: 'btn wiggle default-shadow', id: 'contact', data: { toggle: 'modal', target: '#basicExampleModal', backdrop: false } %>
<% end %>
  <%= submit_tag t('photo'), :type => 'button', class: 'btn wiggle default-shadow', id: 'photo', onclick: 'showImage();' %>
</div>

<div id="map"></div>
<script>
(function() {
  var $, cupcakeTiles;
  $ = jQuery;
  cupcakeTiles = L.tileLayer('https://api.mapbox.com/styles/v1/julesvau/cjl26w2ce4t8u2sohaa3uec8d/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoianVsZXN2YXUiLCJhIjoiY2prNDd6NW5yMGFtOTNrbzQ5bWEweDgzbSJ9.-RD762orQSENzQ_f7TKU9g', {
  //cupcakeTiles = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_nolabels/{z}/{x}/{y}.png', {
    minZoom: 2,
    maxZoom: 14,
  });

  $.getJSON('<%= @passenger.id %>.json', function(data) {
    var geojson, map;
    var pointlist = [];

    geojson = L.geoJson(data, {
    onEachFeature: function(feature, layer) {
        layer.bindPopup(feature.properties.popupContent, {
          offset: new L.Point(10, -20),
           keepInView: true,
            showOnMouseOver: true,
            maxWidth: 500
          });

          layer.on('mouseover tap', function (e) {
              this.openPopup();
              //Change icon
              //e.target.setIcon(exampleiconHover);
          });

          layer.on('mouseout', function (e) {
            //  this.closePopup()
              //Change Icon
              //e.target.setIcon(exampleIcon);
          });
        var x = feature.geometry.coordinates[1];
        var y = feature.geometry.coordinates[0];
        pointlist.push([x, y]);

        if (layer.feature.properties.markerurl == null){
        layer.setIcon(new L.DivIcon({
        iconSize: new L.Point(64, 64),
        iconAnchor:[24, 24],
        className: "",
        html:'<p class="text-center"> <img src="'+layer.feature.properties.markerurl_fallback+'" class="img-marker img-circle '+layer.feature.properties.divclass+'">'+layer.feature.properties.title+'</p>'
        }));


       } else {
          layer.setIcon(new L.DivIcon({
          iconSize: new L.Point(64, 64),
          iconAnchor:[24, 24],
            className: "",
          html:'<p class="text-center"> <img src="'+layer.feature.properties.markerurl+'" class="img-marker img-circle '+layer.feature.properties.divclass+'">'+layer.feature.properties.title+'</p>'

          }));
            }
  }
});

    if (jQuery.isEmptyObject( geojson._layers )){
      map = L.map('map').setView([30, 0], 2);
    } else {
  map = L.map('map').fitBounds(geojson.getBounds(), {maxZoom: 14, padding: [95, 95] });
  //  map = L.map('map').fitBounds(geojson.getBounds());

    }

    map.removeControl( map.zoomControl);
    cupcakeTiles.addTo(map);

    var markers = L.markerClusterGroup({
        //disableClusteringAtZoom: 10,
        maxClusterRadius: 80,
        spiderfyOnMaxZoom: true,
        showCoverageOnHover: true,
        zoomToBoundsOnClick: true,
        spiderfyDistanceMultiplier: 3.5,
        spiderLegPolylineOptions: { weight: 2, color: '#181818', opacity: 0.75 },
        //polygonOptions: { color: '#fff000', weight: 4, opacity: 1, fillOpacity: 0.5 },
        polygonOptions: { color: '#222', opacity: 1 },
        //weight: 1.5, color: '#222', opacity: initialLegOpacity
        iconCreateFunction: function(cluster) {
          var count = cluster.getChildCount();
          var digits = (count+'').length;
          return new L.divIcon({
            html: count,
            className:'cluster digits-'+digits,
            iconSize: null
            });
          }
    });

    var pathLine = L.polyline(pointlist, { dashArray: '1,5', color: '#181818', weight: 2, opacity: 0.75, lineCap: 'square'}).addTo(map)
    markers.addLayer(geojson);
    markers.addTo(map);

    $('.zoomin').click(function(){ map.setZoom(map.getZoom() + 1)  });
    $('.zoomout').click(function(){ map.setZoom(map.getZoom() - 1) });


  });

}).call(this);
</script>
