<% unless @event.nil? %>
<% meta og: { image: @event.photo_url(:facebook) } %>
<%
meta og: {
  image:  {
    width: "1200",
    height: "630"
  }
}
%>
<% end %>

<% if user_signed_in? %>
<% if current_user.try(:admin?) %>
<p></p>
<div class="col-sm-2">
  <%= image_tag(@passenger.photo_url(:thumb), alt: 'Image'.to_s) if @passenger.photo? %>
  <strong>Name:</strong> <%= @passenger.name %>
  <strong>Shortcut:</strong> <%= @passenger.shortcut %>
  <br>
  <%= link_to 'Edit', edit_passenger_path(@passenger), class: "btn btn-primary" %> |
  <%= link_to(t('back'), passengers_path, class: "btn btn-default") %>
</div>

<%#= image_tag(@event.photo_url(:thumb), alt: 'Image'.to_s) if @event.photo? %>
<%#= @event.photo_url(:facebook) if @event.photo? %>

<% end %>
<% end %>
<p>
  <%= render :file => 'contacts/new' %>
</p>

<div id="map" style="height: 75vh"></div>
<script>
(function() {
  var $, cupcakeTiles;
  $ = jQuery;
  cupcakeTiles = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_nolabels/{z}/{x}/{y}.png', {
    minZoom: 2,
    maxZoom: 18,
  });

  $.getJSON('<%= @passenger.id %>.json', function(data) {
    var geojson, map;
    var counter = 0;
    var pointlist = [];

    geojson = L.geoJson(data, {
    onEachFeature: function(feature, layer) {
        layer.bindPopup(feature.properties.popupContent, {offset: new L.Point(0, -20), keepInView: true});

        counter++;
        var x = feature.geometry.coordinates[1];
        var y = feature.geometry.coordinates[0];
        pointlist.push([x, y]);

        if (layer.feature.properties.markerurl == null){
        layer.setIcon(new L.DivIcon({
        iconSize: new L.Point(64, 64),
        //iconAnchor:[50, 300],
        className: "divicon",
        html:'<p class="text-center small text-muted"> <img src="'+layer.feature.properties.markerurl_fallback+'" class="img-marker img-circle"><code>Etape '+counter+'</code></p>'
        //html:'<p class="text-center small text-muted"><i class="fa fa-circle fa-3x" aria-hidden="true"></i>'
        //html:'<a href="passengers/'+layer.feature.properties.id+'"><p class="text-center small text-muted"><svg width="32" height="32"><rect width="32" height="32" style="fill:rgb(102,102,102);" /></svg><code>'+feature.properties.passenger+'</code></p></a>'

        //html:'<p class="text-center small text-muted"><i class="fa fa-circle fa-3x" aria-hidden="true"></i><code>Etape '+counter+'</code></p>'
        }));


       } else {
          console.log('picture presente');
          layer.setIcon(new L.DivIcon({
          iconSize: new L.Point(64, 64),
          //iconAnchor:[50, 300],
          className: "divicon",
          //html:'<img src="'+layer.feature.properties.markerurl+'" class="img-marker img-circle">'
          html:'<p class="text-center small text-muted"> <img src="'+layer.feature.properties.markerurl+'" class="img-marker img-circle"><code><%= t('event') %> '+counter+'</code></p>'

          }));
            }
  }
});

function isEmpty(obj) {
    for(var key in obj) {
        if(obj.hasOwnProperty(key))
            return false;
    }
    return true;
}

if(isEmpty(geojson._layers)) {
  //console.log('layers sont vides');
  map = L.map('map').setView([30, 0], 2);
} else {
  //console.log('markers existent');
  map = L.map('map').fitBounds(geojson.getBounds());
}

    map.zoomControl.setPosition('bottomleft');
    cupcakeTiles.addTo(map);
    var markers = L.markerClusterGroup();
    var pathLine = L.polyline(pointlist, { dashArray: '1,5', color: '#000', weight: 1.3, opacity: 1, lineCap: 'square'}).addTo(map)
    markers.addLayer(geojson);
    markers.addTo(map);

  });

}).call(this);
</script>
