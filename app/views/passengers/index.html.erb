<% meta og: { image: URI.join(root_url, image_path("banner.jpg")) } %>
<% meta og: { image:  { width: "1200", height: "630" } } %>
<% if user_signed_in? && current_user.try(:admin?) %>
<div class="col-md-4">
  <h1><%= t('passengers') %></h1> <%= link_to fa_icon('plus-circle', text: "#{t('new')} #{t('passenger')}"), new_passenger_path, class: "btn btn-default" %>
        <table class="table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Shortcut</th>
              <th>Steps</th>
              <th colspan="3"></th>
            </tr>
          </thead>
          <tbody>
            <% @passengers.each do |passenger| %>
              <tr>
                <td><%= passenger.name %></td>
                <td><%= passenger.shortcut %></td>
                <td><%= passenger.events.size %></td>
                <td>
                <%= link_to(edit_passenger_path(passenger), :class => 'btn btn-primary btn-xs') do %>
                <i class="fa fa-edit"> </i> <%= t('edit') %>
                <% end %>

                <%= link_to(passenger, method: :delete, data: { confirm: 'Are you sure?'}, :class => 'btn btn-danger btn-xs') do %>
                <i class="fa fa-times"> </i> <%= t('destroy') %>
                </td>
                <% end %>
          </tr>
          <% end %>
          </tbody>
        </table>
</div>
<% end %>

<div id="map"></div>

<script>
(function() {
  var $, cupcakeTiles;
  $ = jQuery;
    //cupcakeTiles = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_nolabels/{z}/{x}/{y}.png', {
    cupcakeTiles = L.tileLayer('https://api.mapbox.com/styles/v1/julesvau/cjkh85uud2eh22qruz2ylt7zq/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoianVsZXN2YXUiLCJhIjoiY2prNDd6NW5yMGFtOTNrbzQ5bWEweDgzbSJ9.-RD762orQSENzQ_f7TKU9g', {
    //attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
  });

  $.getJSON('passengers.json', function(data) {
    var geojson, map;
geojson = L.geoJson(data, {
    onEachFeature: function(feature, layer) {
        //layer.bindPopup(feature.properties.popupContent);
        //layer.bindTooltip(feature.properties.passenger, { permanent: true, interactive: true, direction: 'bottom' });

        if (layer.feature.properties.markerurl == null){
        layer.setIcon(new L.DivIcon({
        iconSize: new L.Point(82, 32),
        //iconAnchor:[50, 50],
        className: "divicon",
        html:'<a href="'+layer.feature.properties.link+'"><img src="'+layer.feature.properties.markerurl_fallback+'" class="img-marker" alt="Image"><p class="text-center"><mark>'+feature.properties.passenger+'</mark></p></a>'

        }));


       } else {
          console.log('picture presente');
          layer.setIcon(new L.DivIcon({
          iconSize: new L.Point(82, 32),
          //iconAnchor:[50, 50],
          className: "divicon",
          html:'<a href="'+layer.feature.properties.link+'"><img src="'+layer.feature.properties.markerurl+'" class="img-marker" alt="Image"><p class="text-center"><mark>'+feature.properties.passenger+'</mark></p></a>'
          }));
            }
  }
});

function isEmpty(obj) {
    for(var key in obj) {
        if(obj.hasOwnProperty(key))
            return false;
    }
    return true;
}

if(isEmpty(geojson._layers)) {
  //console.log('layers sont vides');
  map = L.map('map').setView([30, 0], 2);
} else {
  //console.log('markers existent');
  map = L.map('map').fitBounds(geojson.getBounds(), {maxZoom: 4});
}

    map.removeControl( map.zoomControl );
    cupcakeTiles.addTo(map);
    var markers = L.markerClusterGroup();
    markers.addLayer(geojson);
    markers.addTo(map);
    map.options.maxZoom = 8;
    map.options.minZoom = 3;
    map.fire('zoomend');

    // zoom in function
          $('.zoomin').click(function(){
            map.setZoom(map.getZoom() + 1)
          });


          // zoom out function
          $('.zoomout').click(function(){
            map.setZoom(map.getZoom() - 1)
          });



  });

}).call(this);
</script>
